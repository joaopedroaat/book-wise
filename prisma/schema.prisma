datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_acount_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?       @map("email_verified")
  avatarUrl     String?         @map("avatar_url")
  createdAt     DateTime        @default(now()) @map("created_at")
  accounts      Account[]
  sessions      Session[]
  ratings       Rating[]
  RecentReading RecentReading[]

  @@map("users")
}

model RecentReading {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  bookId    String   @map("book_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("recent_readings")
}

model Book {
  id         String   @id @default(uuid())
  name       String
  author     String
  summary    String   @db.Text
  coverUrl   String   @map("cover_url")
  totalPages Int      @map("total_pages")
  createdAt  DateTime @default(now()) @map("created_at")

  categories    CategoriesOnBooks[]
  ratings       Rating[]
  RecentReading RecentReading[]

  @@map("books")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  books CategoriesOnBooks[]

  @@map("categories")
}

model CategoriesOnBooks {
  bookId     String @map("book_id")
  categoryId String @map("category_id")

  book     Book     @relation(fields: [bookId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([bookId, categoryId])
}

model Rating {
  id          String   @id @default(uuid())
  rate        Int
  description String   @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  bookId      String   @map("book_id")
  userId      String   @map("user_id")

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("ratings")
}
